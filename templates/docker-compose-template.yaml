version: '2'

services:
{{if eq $.OrdererType "kafka" -}}
  {{range $.ZooKeeperNodes}}
  {{.Name}}:
    container_name: {{.Name}}
    image: {{$.DockerNS}}/fabric-zookeeper:{{$.ThirdpartyVersionTag}}
    restart: always
    environment:
      - ZOO_MY_ID={{.ID}}
      - ZOO_SERVERS={{range $i, $zknode := $.ZooKeeperNodes}}server.{{Inc $i}}={{$zknode.Name}}:2888:3888 {{end}}
    ports:
      - 2181
      - 2888
      - 3888
  {{end -}}

  {{range .KafkaBrokers}}
  {{.Name}}:
    container_name: {{.Name}}
    image: {{$.DockerNS}}/fabric-kafka:{{$.ThirdpartyVersionTag}}
    restart: always
    environment:
      - KAFKA_BROKER_ID={{.ID}}
      - KAFKA_ZOOKEEPER_CONNECT={{range $.ZooKeeperNodes}}{{.Name}}:2181,{{end}}
      - KAFKA_DEFAULT_REPLICATION_FACTOR=1
      - KAFKA_MIN_INSYNC_REPLICAS=1
      - KAFKA_LOG_RETENTION_MS=-1
      - KAFKA_MESSAGE_MAX_BYTES=103809024
      - KAFKA_REPLICA_FETCH_MAX_BYTES=103809024
      - KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false
    ports:
      - 9092
    depends_on: {{range $.ZooKeeperNodes}}
      - {{.Name}}{{end}}
  {{end}}
{{end -}}

{{range .Orderers}}
  {{.Name}}:
    container_name: {{.Name}}
    image: {{$.DockerNS}}/fabric-orderer:{{$.FabricVersionTag}}
    tty: true
    environment:
      - CONFIGTX_ORDERER_ORDERERTYPE={{$.OrdererType}}
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      - ORDERER_GENERAL_LISTENPORT=7050
      - ORDERER_GENERAL_GENESISMETHOD=file
      - ORDERER_GENERAL_QUEUESIZE=1000
      - ORDERER_GENERAL_MAXWINDOWSIZE=1000
      - ORDERER_RAMLEDGER_HISTORY_SIZE=100
      - ORDERER_GENERAL_BATCHSIZE=10
      - ORDERER_GENERAL_BATCHTIMEOUT=10s
      - ORDERER_GENERAL_LOGLEVEL={{$.LogLevel}}
      - ORDERER_GENERAL_GENESISFILE=/var/hyperledger/fabric/crypto-config/genesis/genesis.block
      - ORDERER_GENERAL_LOCALMSPID={{.Organization.Name}}MSP
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/fabric/crypto-config/msp
      - ORDERER_GENERAL_TLS_ENABLED={{$.TLSEnabled}}
      {{- if $.TLSEnabled}}
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/fabric/crypto-config/tls/server.crt
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/fabric/crypto-config/tls/server.key
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/fabric/crypto-config/tls/ca.crt{{range $.PeerOrganizations}}, /var/hyperledger/fabric/crypto-config/peerOrganizations/{{.FullName}}/tls/ca.crt{{end}}]
      {{- end}}
      {{- if eq $.OrdererType "kafka"}}
      - ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s
      - ORDERER_KAFKA_RETRY_SHORTTOTAL=30s
      - ORDERER_KAFKA_VERBOSE=true
      {{- end}}
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: orderer
    volumes:
      - ./volumes/crypto-config/genesis/:/var/hyperledger/fabric/crypto-config/genesis/
      - ./volumes/crypto-config/ordererOrganizations/{{$.Domain}}/orderers/{{.Name}}/:/var/hyperledger/fabric/crypto-config/
      {{- range $.PeerOrganizations}}
      - ./volumes/crypto-config/peerOrganizations/{{.FullName}}/peers/peer1.{{.FullName}}/tls/ca.crt:/var/hyperledger/fabric/crypto-config/peerOrganizations/{{.FullName}}/tls/ca.crt
      {{- end}}
    ports:
      - {{.ExposedPort}}:{{.Port}}
    {{- if eq $.OrdererType "kafka"}}
    depends_on: {{range $.KafkaBrokers}}
      - {{.Name}}{{- end}}
    {{- end}}
{{end}}

{{- range .CAs}}
  {{.Name}}:
    container_name: {{.Name}}
    image: {{$.DockerNS}}/fabric-ca:{{$.CaVersionTag}}
    environment:
      - FABRIC_CA_HOME=/etc/hyperledger/fabric-ca-server
      - FABRIC_CA_SERVER_CA_NAME={{.Name}}
      - FABRIC_CA_SERVER_CA_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto-config/ca/{{.Name}}-cert.pem
      - FABRIC_CA_SERVER_CA_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto-config/ca/secret.key
      - FABRIC_CA_SERVER_TLS_ENABLED={{$.TLSEnabled}}
      {{- if $.TLSEnabled}}
      - FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto-config/ca/{{.Name}}-cert.pem
      - FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto-config/ca/secret.key
      #- FABRIC_CA_SERVER_TLS_CERTFILE=/etc/hyperledger/fabric-ca-server/crypto-config/tlsca/tlsca.{{.OrgFullName}}-cert.pem
      #- FABRIC_CA_SERVER_TLS_KEYFILE=/etc/hyperledger/fabric-ca-server/crypto-config/tlsca/secret.key
      {{- end}}
    command: sh -c 'fabric-ca-server start -b admin:adminpw -d'
    volumes:
      - ./volumes/crypto-config/peerOrganizations/{{.OrgFullName}}/ca/:/etc/hyperledger/fabric-ca-server/crypto-config/ca/
     #- ./volumes/crypto-config/peerOrganizations/{{.OrgFullName}}/tlsca/:/etc/hyperledger/fabric-ca-server/crypto-config/tlsca/
    ports:
      - {{.ExposedPort}}:{{.Port}}
{{end}}

{{- range .Peers}}
  {{- if not (eq $.DBProvider "goleveldb")}}
  {{.DB.Name}}:
    container_name: {{.DB.Name}}
    {{if eq $.DBProvider "CouchDB" -}}
    image: {{$.DockerNS}}/fabric-couchdb:{{$.ThirdpartyVersionTag}}
    {{else -}}
    image: {{.DB.Image}}
    {{end -}}
    ports:
      - {{.DB.ExposedPort}}:{{.DB.Port}}
  {{- end}}

  {{.Name}}:
    container_name: {{.Name}}
    image: {{$.DockerNS}}/fabric-peer:{{$.FabricVersionTag}}
    tty: true
    environment:
        - CORE_PEER_ID={{.Name}}
        - CORE_PEER_ADDRESS={{.Name}}:{{.Port}}
        - CORE_PEER_LOCALMSPID={{.Organization.Name}}MSP
        - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/crypto-config/msp
        - CORE_PEER_TLS_ENABLED={{$.TLSEnabled}}
        {{- if $.TLSEnabled}}
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/crypto-config/tls/server.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/crypto-config/tls/server.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/crypto-config/tls/ca.crt
        {{- end}}
        - CORE_PEER_ENDORSER_ENABLED=true
        - CORE_PEER_GOSSIP_EXTERNALENDPOINT={{.Name}}:{{.Port}}
        {{- if not (eq .Name (index $.Peers 0).Name)}}
        - CORE_PEER_GOSSIP_BOOTSTRAP=peer1.{{.Organization.FullName}}:{{(index $.Peers 0).Port}}
        {{- end}}
        - CORE_PEER_GOSSIP_USELEADERELECTION=true
        - CORE_PEER_GOSSIP_ORGLEADER=false
        # This disables mutual auth for gossip
        - CORE_PEER_GOSSIP_SKIPHANDSHAKE=true
        - CORE_PEER_PROFILE_ENABLED=true
        - CORE_LEDGER_STATE_STATEDATABASE={{.DB.Provider}}
        {{- if not (eq .DB.Provider "goleveldb") -}}
        {{- if eq .DB.Provider "CouchDB"}}
        - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS={{.DB.Name}}:{{.DB.Port}}
        {{- else}}
        - CORE_LEDGER_STATE_{{.DB.Provider}}_HOST={{.DB.Name}}
        - CORE_LEDGER_STATE_{{.DB.Provider}}_PORT={{.DB.Port}}
        - CORE_LEDGER_STATE_{{.DB.Provider}}_USERNAME={{.DB.Username}}
        - CORE_LEDGER_STATE_{{.DB.Provider}}_PASSWORD={{.DB.Password}}
        - CORE_LEDGER_STATE_{{.DB.Provider}}_DRIVER={{.DB.Driver}}
        - CORE_LEDGER_STATE_{{.DB.Provider}}_DBNAME={{.DB.DB}}
        {{- end}}
        {{- end}}
        - CORE_LOGGING_LEVEL={{$.LogLevel}}
        - CORE_NEXT=true
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE={{$.Name | ToLower}}_default
        - GOPATH=/opt/gopath
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    command: peer node start --peer-defaultchain=false
             /bin/bash
    volumes:
        - /var/run/:/host/var/run/
        - ./volumes/crypto-config/peerOrganizations/{{.Organization.FullName}}/peers/{{.Name}}/:/etc/hyperledger/fabric/crypto-config/
    ports:
      - {{.ExposedPort}}:{{.Port}}
      - {{.ExposedEventPort}}:{{.EventPort}}
    depends_on: {{range $.Orderers}}
      - {{.Name}} {{end}}
      {{- if not (eq .DB.Provider "goleveldb")}}
      - {{.DB.Name}}
      {{- end}}

  cli.{{.Name}}:
      container_name: cli.{{.Name}}
      image: {{$.DockerNS}}/fabric-tools:{{$.FabricVersionTag}}
      tty: true
      environment:
        - GOPATH=/opt/gopath
        - CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock
        - CORE_LOGGING_LEVEL={{$.LogLevel}}
        - CORE_PEER_ID={{.Name}}
        - CORE_PEER_ADDRESS={{.Name}}:{{.Port}}
        - CORE_PEER_LOCALMSPID={{.Organization.Name}}MSP
        - CORE_PEER_TLS_ENABLED={{$.TLSEnabled}}
        {{- if $.TLSEnabled}}
        - CORE_PEER_TLS_CERT_FILE=/etc/hyperledger/fabric/crypto-config/tls/server.crt
        - CORE_PEER_TLS_KEY_FILE=/etc/hyperledger/fabric/crypto-config/tls/server.key
        - CORE_PEER_TLS_ROOTCERT_FILE=/etc/hyperledger/fabric/crypto-config/tls/ca.crt
        {{- end}}
        - CORE_PEER_MSPCONFIGPATH=/etc/hyperledger/fabric/crypto-config/users/Admin@{{.Organization.FullName}}/msp
        - ORDERER_CA=/etc/hyperledger/fabric/crypto-config/orderer/msp/tlscacerts/tlsca.{{$.Domain}}-cert.pem
      working_dir: /opt/gopath/src/github.com/hyperledger/fabric
      command: /bin/bash
      volumes:
        - /var/run/:/host/var/run/
        - ./volumes/crypto-config/peerOrganizations/{{.Organization.FullName}}/peers/{{.Name}}/:/etc/hyperledger/fabric/crypto-config/
        - ./volumes/crypto-config/peerOrganizations/{{.Organization.FullName}}/users/:/etc/hyperledger/fabric/crypto-config/users/
        - ./volumes/crypto-config/ordererOrganizations/{{$.Domain}}/orderers/{{(index $.Orderers 0).Name}}/:/etc/hyperledger/fabric/crypto-config/orderer/
        - ./volumes/chaincodes/:/opt/gopath/src/github.com/hyperledger/fabric/chaincodes/
        - ./volumes/crypto-config/channel-artifacts/:/opt/gopath/src/github.com/hyperledger/fabric/channel-artifacts/
      depends_on:
        - {{.Name}}
{{end}}
